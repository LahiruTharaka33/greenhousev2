// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Business Entities
model Customer {
  id              String   @id @default(cuid())
  customerId      String   @unique
  customerName    String
  company         String?
  cultivationType String?
  cultivationName String?
  noOfTunnel      Int      @default(0)
  location        String?
  email           String?
  phone           String?
  address         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  tunnels     Tunnel[]
  inventories CustomerInventory[]
}

model Tunnel {
  id          String   @id @default(cuid())
  name        String
  location    String?
  description String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  schedules   Schedule[]
  tasks       Task[]
}

model CustomerInventory {
  id          String   @id @default(cuid())
  name        String
  description String?
  quantity    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items       Item[]
}

model MainInventory {
  id          String   @id @default(cuid())
  itemId      String   @unique
  itemType    String
  itemName    String
  description String?
  quantity    Int      @default(0)
  storedDate  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  items       Item[]
}

model Item {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String?  @unique
  quantity    Int      @default(0)
  unit        String?
  price       Decimal? @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  customerInventoryId String?
  customerInventory   CustomerInventory? @relation(fields: [customerInventoryId], references: [id], onDelete: SetNull)
  mainInventoryId     String?
  mainInventory       MainInventory? @relation(fields: [mainInventoryId], references: [id], onDelete: SetNull)
}

model Schedule {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  tunnelId    String
  tunnel      Tunnel @relation(fields: [tunnelId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("pending")
  priority    String   @default("medium")
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  tunnelId    String
  tunnel      Tunnel @relation(fields: [tunnelId], references: [id], onDelete: Cascade)
  scheduleId  String?
  schedule    Schedule? @relation(fields: [scheduleId], references: [id], onDelete: SetNull)
}
