generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?
  role          String    @default("user")
  accounts      Account[]
  customer      Customer?
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id                  String              @id @default(cuid())
  email               String?
  phone               String?
  address             String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  company             String?
  cultivationName     String?
  cultivationType     String?
  customerId          String              @unique
  customerName        String
  location            String?
  noOfTunnel          Int                 @default(0)
  userId              String?             @unique
  user                User?               @relation(fields: [userId], references: [id])
  customerInventories CustomerInventory[]
  schedules           Schedule[]
  tasks               Task[]
  tunnels             Tunnel[]
}

model MainInventory {
  id          String   @id @default(cuid())
  description String?
  quantity    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  itemId      String   @unique
  itemName    String
  itemType    String
  storedDate  DateTime @default(now())
  item        Item     @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
}

model Item {
  id                  String              @id @default(cuid())
  itemId              String              @unique
  itemName            String
  itemCategory        String
  unit                String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  customerInventories CustomerInventory[]
  mainInventory       MainInventory?
  schedules           Schedule[]
  tankConfigs         TankConfiguration[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("todo")
  priority    String    @default("medium")
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assignedTo  String?
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Tunnel {
  id              String              @id @default(cuid())
  tunnelId        String              @unique
  tunnelName      String
  description     String?
  cultivationType String?
  location        String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  customerId      String
  clientId        String?
  schedules       Schedule[]
  tankConfigs     TankConfiguration[]
  customer        Customer            @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model CustomerInventory {
  id          String   @id @default(cuid())
  itemId      String
  itemType    String
  itemName    String
  description String?
  quantity    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  item        Item     @relation(fields: [itemId], references: [itemId], onDelete: Cascade)

  @@unique([itemId, customerId])
}

model Schedule {
  id            String   @id @default(cuid())
  customerId    String
  itemId        String
  scheduledDate DateTime
  scheduledTime String
  quantity      Int      @default(1)
  notes         String?
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tunnelId      String?
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  item          Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tunnel        Tunnel?  @relation(fields: [tunnelId], references: [id], onDelete: Cascade)
}

model TankConfiguration {
  id        String   @id @default(cuid())
  tunnelId  String
  tankName  String   // "Tank A", "Tank B", "Tank C"
  itemType  String   // "water" or "fertilizer"
  itemId    String?  // Item ID if itemType is "fertilizer", null if "water"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tunnel    Tunnel   @relation(fields: [tunnelId], references: [id], onDelete: Cascade)
  item      Item?    @relation(fields: [itemId], references: [id], onDelete: SetNull)

  @@unique([tunnelId, tankName])
}
